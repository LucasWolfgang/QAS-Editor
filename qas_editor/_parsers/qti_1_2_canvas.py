"""
Question and Answer Sheet Editor <https://github.com/LucasWolfgang/QAS-Editor>
Copyright (C) 2022  Lucas Wolfgang

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Copyright (c) 2020, Geoffrey M. Poore
All rights reserved.

Licensed under the BSD 3-Clause License:
http://opensource.org/licenses/BSD-3-Clause
"""
from __future__ import annotations
from typing import TYPE_CHECKING
from zipfile import ZipFile, ZipInfo,ZIP_DEFLATED
if TYPE_CHECKING:
    from ..category import Category
    from typing import Union

MANIFEST_START = '''\
<?xml version="1.0" encoding="UTF-8"?>
<manifest identifier="{manifest_identifier}" xmlns="http://www.imsglobal.org/xsd/imsccv1p1/imscp_v1p1" xmlns:lom="http://ltsc.ieee.org/xsd/imsccv1p1/LOM/resource" xmlns:imsmd="http://www.imsglobal.org/xsd/imsmd_v1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/imsccv1p1/imscp_v1p1 http://www.imsglobal.org/xsd/imscp_v1p1.xsd http://ltsc.ieee.org/xsd/imsccv1p1/LOM/resource http://www.imsglobal.org/profile/cc/ccv1p1/LOM/ccv1p1_lomresource_v1p0.xsd http://www.imsglobal.org/xsd/imsmd_v1p2 http://www.imsglobal.org/xsd/imsmd_v1p2p2.xsd">
  <metadata>
    <schema>IMS Content</schema>
    <schemaversion>1.1.3</schemaversion>
    <imsmd:lom>
      <imsmd:general>
        <imsmd:title>
          <imsmd:string>QTI assessment generated by text2qti</imsmd:string>
        </imsmd:title>
      </imsmd:general>
      <imsmd:lifeCycle>
        <imsmd:contribute>
          <imsmd:date>
            <imsmd:dateTime>{date}</imsmd:dateTime>
          </imsmd:date>
        </imsmd:contribute>
      </imsmd:lifeCycle>
      <imsmd:rights>
        <imsmd:copyrightAndOtherRestrictions>
          <imsmd:value>yes</imsmd:value>
        </imsmd:copyrightAndOtherRestrictions>
        <imsmd:description>
          <imsmd:string>Private (Copyrighted) - http://en.wikipedia.org/wiki/Copyright</imsmd:string>
        </imsmd:description>
      </imsmd:rights>
    </imsmd:lom>
  </metadata>
  <organizations/>
  <resources>
    <resource identifier="{assessment_identifier}" type="imsqti_xmlv1p2">
      <file href="{assessment_identifier}/{assessment_identifier}.xml"/>
      <dependency identifierref="{dependency_identifier}"/>
    </resource>
    <resource identifier="{dependency_identifier}" type="associatedcontent/imscc_xmlv1p1/learning-application-resource" href="{assessment_identifier}/assessment_meta.xml">
      <file href="{assessment_identifier}/assessment_meta.xml"/>
    </resource>
'''

IMAGE = '''\
    <resource identifier="text2qti_image_{ident}" type="webcontent" href="{path}">
      <file href="{path}"/>
    </resource>
'''

MANIFEST_END = '''\
  </resources>
</manifest>
'''

TEMPLATE_ASSESMENT = '''\
<?xml version="1.0" encoding="UTF-8"?>
<quiz identifier="{assessment}" xmlns="http://canvas.instructure.com/xsd/cccv1p0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://canvas.instructure.com/xsd/cccv1p0 https://canvas.instructure.com/xsd/cccv1p0.xsd">
  <title>{title}</title>
  <description>{description}</description>
  <shuffle_answers>{shuffle_answers}</shuffle_answers>
  <scoring_policy>keep_highest</scoring_policy>
  <hide_results>{hide_results}</hide_results>
  <quiz_type>assignment</quiz_type>
  <points_possible>{points_possible:.1f}</points_possible>
  <require_lockdown_browser>false</require_lockdown_browser>
  <require_lockdown_browser_for_results>false</require_lockdown_browser_for_results>
  <require_lockdown_browser_monitor>false</require_lockdown_browser_monitor>
  <lockdown_browser_monitor_data/>
  <show_correct_answers>{show_correct_answers}</show_correct_answers>
  <anonymous_submissions>false</anonymous_submissions>
  <could_be_locked>false</could_be_locked>
  <allowed_attempts>1</allowed_attempts>
  <one_question_at_a_time>{one_question_at_a_time}</one_question_at_a_time>
  <cant_go_back>{cant_go_back}</cant_go_back>
  <available>false</available>
  <one_time_results>false</one_time_results>
  <show_correct_answers_last_attempt>false</show_correct_answers_last_attempt>
  <only_visible_to_overrides>false</only_visible_to_overrides>
  <module_locked>false</module_locked>
  <assignment identifier="{assignment}">
    <title>{title}</title>
    <due_at/>
    <lock_at/>
    <unlock_at/>
    <module_locked>false</module_locked>
    <workflow_state>unpublished</workflow_state>
    <assignment_overrides>
    </assignment_overrides>
    <quiz_identifierref>{assessment}</quiz_identifierref>
    <allowed_extensions></allowed_extensions>
    <has_group_category>false</has_group_category>
    <points_possible>{points_possible:.1f}</points_possible>
    <grading_type>points</grading_type>
    <all_day>false</all_day>
    <submission_types>online_quiz</submission_types>
    <position>1</position>
    <turnitin_enabled>false</turnitin_enabled>
    <vericite_enabled>false</vericite_enabled>
    <peer_review_count>0</peer_review_count>
    <peer_reviews>false</peer_reviews>
    <automatic_peer_reviews>false</automatic_peer_reviews>
    <anonymous_peer_reviews>false</anonymous_peer_reviews>
    <grade_group_students_individually>false</grade_group_students_individually>
    <freeze_on_copy>false</freeze_on_copy>
    <omit_from_final_grade>false</omit_from_final_grade>
    <intra_group_peer_reviews>false</intra_group_peer_reviews>
    <only_visible_to_overrides>false</only_visible_to_overrides>
    <post_to_sis>false</post_to_sis>
    <moderated_grading>false</moderated_grading>
    <grader_count>0</grader_count>
    <grader_comments_visible_to_graders>true</grader_comments_visible_to_graders>
    <anonymous_grading>false</anonymous_grading>
    <graders_anonymous_to_graders>false</graders_anonymous_to_graders>
    <grader_names_visible_to_final_grader>true</grader_names_visible_to_final_grader>
    <anonymous_instructor_annotations>false</anonymous_instructor_annotations>
    <post_policy>
      <post_manually>false</post_manually>
    </post_policy>
  </assignment>
  <assignment_group_identifierref>{assignment_group}</assignment_group_identifierref>
  <assignment_overrides>
  </assignment_overrides>
</quiz>
'''

def get_meta(assessment_identifier: str, assignment_group_identifier: str,
                    assignment_identifier: str, title_xml: str, description_html_xml: str,
                    points_possible: Union[int, float], shuffle_answers: str,
                    show_correct_answers: str, one_question_at_a_time: str,
                    cant_go_back: str) -> str:
    '''
    Generate `assessment_meta.xml`.
    '''
    return TEMPLATE_ASSESMENT.format(assessment_identifier=assessment_identifier,
                           assignment_identifier=assignment_identifier,
                           assignment_group_identifier=assignment_group_identifier,
                           title=title_xml,
                           description=description_html_xml,
                           points_possible=points_possible,
                           shuffle_answers=shuffle_answers,
                           show_correct_answers=show_correct_answers,
                           hide_results='always' if show_correct_answers == 'false' else '',
                           one_question_at_a_time=one_question_at_a_time,
                           cant_go_back=cant_go_back)

# -----------------------------------------------------------------------------

def read(cls,  file_path: str):
    return None

# -----------------------------------------------------------------------------


def _txrecursive(cat: "Category"):
    assessment = get_assessment(quiz=cat,assessment=f'qti_assessment_{cat.id}',
                                title_xml=cat.name)



def write(self: "Category", file_path: str):
    assessment = f'qti_assessment_0000'
    dependency = f'qti_dependency_0000'
    assignment = f'qti_assignment_0000'
    assignment_group = f'qti_assignment-group_0000'
    manifest = get_manifest(manifest=f'qti_manifest_0000',
                            assessment=assessment,
                            dependency=dependency,
                            images=cat.images)
    meta = get_meta(assessment=assessment, assignment=assignment,
                    assignment_group=assignment_group,
                    title_xml=cat.title,
                    description_html_xml=cat.description_html_xml,
                    points_possible=cat.points_possible,
                    shuffle_answers=cat.shuffle_answers_xml,
                    show_correct_answers=cat.show_correct_answers_xml,
                    one_question_at_a_time=cat.one_question_at_a_time_xml,
                    cant_go_back=cat.cant_go_back_xml)
    with ZipFile(file_path, 'w', compression=ZIP_DEFLATED) as zf:
        zf.writestr('imsmanifest.xml', manifest)
        zf.writestr(ZipInfo('non_cc_assessments/'), b'')
        zf.writestr(f'{assessment}/assessment_meta.xml', meta)
        zf.writestr(f'{assessment}/{assessment}.xml', assessment)
        for key, value in self.resources.items:
            zf.write(key, value.path)

